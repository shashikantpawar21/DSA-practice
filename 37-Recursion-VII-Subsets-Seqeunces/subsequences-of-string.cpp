// Problem statement
// You are given a string 'STR' containing lowercase English letters from a to z inclusive. Your task is to find all non-empty possible subsequences of 'STR'.

// A Subsequence of a string is the one which is generated by deleting 0 or more letters from the string and keeping the rest of the letters in the same order.
// Detailed explanation ( Input/output format, Notes, Images )
// Constraints:
// 1 <= T <= 10
// 1 <=  |STR| <= 16

// Where |STR| represents the length of the string 'STR'.

// Time Limit: 1 sec
// Sample Input 1:
// 1
// abc
// Sample Output 1:
// a ab abc ac b bc c
// Explanation of sample input 1:
// All possible subsequences of abc are :
// “a” , “b” , “c” , “ab” , “bc” , “ac”, “abc”
// Sample Input 2:
// 1
// bbb
// Sample Output 2:
// b b b bb bb bb bbb

#include <iostream>
#include <string>
#include <vector>
using namespace std;

void getSubsequences(string &s, int i, string subsequence, vector<string> &subsequences)
{
    cout << "i " <<  i << endl;
    cout << "subsequence  " <<  subsequence << endl;
    if (i == s.size())
    {
        subsequences.push_back(subsequence);
        cout << "printing subsequence  " <<  subsequence << endl;
        cout << "returning " << endl << endl ;
        return;
    }
    getSubsequences(s, i + 1, subsequence, subsequences);
    cout << "adding " << s[i] << endl;
    subsequence.push_back(s[i]);
    getSubsequences(s, i + 1, subsequence, subsequences);
    subsequence.pop_back();
    cout << "removing  " << s[i] << endl;
}

int main()
{
    string s = "abc";
    vector<string> subsequences;
    string subsequence;

    getSubsequences(s, 0, subsequence, subsequences);

    for (int i = 0; i < subsequences.size(); i++)
    {
        if (!(subsequences[i].size()))
        {
            cout << "{}" << " ";
            continue;
        }
        cout << subsequences[i] <<  " ";
    }
    cout << endl;
}